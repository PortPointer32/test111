import os
import sys
from aiogram import Bot, Dispatcher, executor, types, filters
import database
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Regexp
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, \
    CallbackQuery, MenuButtonWebApp, WebAppInfo
from aiogram.utils.callback_data import CallbackData
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.handler import CancelHandler
import aiohttp
import random
import logging
import time
import json
from sys import path
import asyncio
from start import restart_main
import re
import string
from datetime import datetime, timedelta

path.append('')

logging.basicConfig(level=logging.INFO)


def split_districts(districts):
    return districts.split(':')


class OrderState(StatesGroup):
    waiting_for_payment = State()
    waiting_for_payment_balance = State()
    waiting_for_payment_manualpay = State()
    waiting_for_payment_card = State()


class OrderBalanceState(StatesGroup):
    waiting_for_balance_payment = State()


class OrderManualPaymentState(StatesGroup):
    waiting_for_manual_payment_confirmation = State()


class OrderCardPaymentState(StatesGroup):
    waiting_for_card_payment_confirmation = State()


class BalanceStates(StatesGroup):
    replenishment_amount = State()


class CaptchaState(StatesGroup):
    input = State()


async def update_crypto_rates():
    global btc_price, ltc_price
    url = 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,litecoin&vs_currencies=rub'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            btc_price = data['bitcoin']['rub']
            ltc_price = data['litecoin']['rub']


async def periodic_crypto_update():
    while True:
        await update_crypto_rates()
        await asyncio.sleep(900)


btc_price = 0
ltc_price = 0


def extract_third_district(districts_string):
    districts = districts_string.split(':')
    if len(districts) >= 3:
        return districts[2]
    else:
        return "–¢—Ä–µ—Ç–∏–π —Ä–∞–π–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω"


def generate_random_id():
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))


async def send_random_captcha(message: types.Message, state: FSMContext):
    captcha_dir = os.path.join(os.path.dirname(__file__), '..', 'captcha')
    if not os.path.exists(captcha_dir) or not os.listdir(captcha_dir):
        return False

    captcha_files = [f for f in os.listdir(captcha_dir) if f.endswith('.jpg')]
    if not captcha_files:
        return False

    captcha_file = random.choice(captcha_files)
    captcha_path = os.path.join(captcha_dir, captcha_file)
    with open(captcha_path, 'rb') as photo:
        await message.answer_photo(photo=photo)

        await message.answer(
            f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É."
        )

        async with state.proxy() as data:
            data['captcha_answer'] = captcha_file.rstrip('.jpg')

    return True


async def register_handlers(dp: Dispatcher, bot_token):
    @dp.message_handler(lambda message: message.text in ["/start", "üè† –ú–µ–Ω—é", "/menu"], state=None)
    async def cmd_start(message: types.Message, state: FSMContext):
        await state.finish()
        user_id = message.from_user.id
        if not database.check_user_exists(user_id, bot_token):
            if await send_random_captcha(message, state):
                await CaptchaState.input.set()
                return

            database.add_user(user_id, bot_token)

        welcome_message = ("<b>–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç</b>\n\n"
                           "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª\n\n"
                           "üì¶ –¢–æ–≤–∞—Ä—ã –∏ —Ü–µ–Ω—ã\n<i>–ñ–º–∏</i> üëâ /products\n- - - - - - - - - - - - - - - -\n"
                           "üåÜ –í—ã–±—Ä–∞—Ç—å —Ä–∞–π–æ–Ω\n<i>–ñ–º–∏</i> üëâ /locations\n- - - - - - - - - - - - - - - -\n"
                           "üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑\n<i>–ñ–º–∏</i> üëâ /last_order"
                           )

        new_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        new_keyboard.add(KeyboardButton('üè† –ú–µ–Ω—é'))
        new_keyboard.add(KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
        new_keyboard.add(KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
        new_keyboard.add(KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))
        await message.answer(welcome_message, reply_markup=new_keyboard, parse_mode="HTML")

    @dp.message_handler(state=CaptchaState.input)
    async def handle_captcha_input(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            correct_answer = data.get('captcha_answer')

        if message.text == correct_answer:
            user_id = message.from_user.id
            database.add_user(user_id, bot_token)
            await state.finish()

            welcome_message = ("<b>–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç</b>\n\n"
                               "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª\n\n"
                               "üì¶ –¢–æ–≤–∞—Ä—ã –∏ —Ü–µ–Ω—ã\n<i>–ñ–º–∏</i> üëâ /products\n- - - - - - - - - - - - - - - -\n"
                               "üåÜ –í—ã–±—Ä–∞—Ç—å —Ä–∞–π–æ–Ω\n<i>–ñ–º–∏</i> üëâ /locations\n- - - - - - - - - - - - - - - -\n"
                               "üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑\n<i>–ñ–º–∏</i> üëâ /last_order"
                               )

            new_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            new_keyboard.add(KeyboardButton('üè† –ú–µ–Ω—é'))
            new_keyboard.add(KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
            new_keyboard.add(KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
            new_keyboard.add(KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

            await message.answer(welcome_message, reply_markup=new_keyboard, parse_mode="HTML")
        else:
            await send_random_captcha(message, state)

    def create_product_keyboard(products):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for product in products:
            button_text = f"{product[1]} product_{product[0]}"
            keyboard.add(types.KeyboardButton(button_text))
        return keyboard

    @dp.message_handler(lambda message: message.text in ["/products", "üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã"], state=None)
    async def show_products(message: types.Message, state: FSMContext):
        products = database.get_all_products_with_details()
        if not products:
            await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        product_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

        product_message = "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä</b>\n\n"
        for index, (product_name_id, product_name, product_price_id, price) in enumerate(products):
            discount = database.get_discount_by_product_name_id(product_name_id)
            discount_text = f"\n + —Å–∫–∏–¥–∫–∞ –¥–æ {discount}%" if discount > 0 else ""

            match = re.search(r'\s(\d+(\.\d+)?\s?–≥)$', product_name)
            if (match):
                clean_name = product_name[:match.start()]
                weight = match.group(1).strip()
                display_name = f"{clean_name} ({weight})"
            else:
                clean_name = product_name
                display_name = clean_name

            button_text = f"{clean_name} product_{product_price_id}_{product_name_id}"
            product_keyboard.add(types.KeyboardButton(button_text))

            product_message += f"üì¶ {display_name}<b>{discount_text}</b>\n{int(price)} —Ä—É–± üëâ /product_{product_price_id}_{product_name_id}\n"
            if (index < len(products) - 1):
                product_message += "- - - - - - - - - - - - - - - -\n"

        product_keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
        product_keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
        product_keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
        product_keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

        product_message += "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n‚ìÇÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n<i>–ñ–º–∏</i> üëâ /menu"

        await message.answer(product_message, reply_markup=product_keyboard, parse_mode=types.ParseMode.HTML)

    @dp.message_handler(lambda message: re.search(r'product_(\d+)_(\d+)', message.text))
    async def product_selected(message: types.Message, state: FSMContext):
        match = re.search(r'product_(\d+)_(\d+)', message.text)
        if (match):
            product_price_id = int(match.group(1))
            product_name_id = int(match.group(2))

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤, –≥–¥–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–≤–∞—Ä —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω–æ–π
            cities = database.get_available_cities_by_product_and_price(product_name_id, product_price_id)
            if (cities):
                product_name = database.get_product_name(product_name_id)
                price = database.get_product_price(product_price_id)
                discount = database.get_discount_by_product_name_id(product_name_id)
                discount_text = f" + —Å–∫–∏–¥–∫–∞ –¥–æ {discount}%" if discount > 0 else ""

                response_message = (f"<b>–í—ã –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ\n"
                                    f" {product_name} –∑–∞ {price} —Ä—É–±</b>\n"
                                    f"–£—Ç–æ—á–Ω–∏—Ç–µ —Ä–∞–π–æ–Ω:\n\n")

                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

                for index, (city_name, city_forkey) in enumerate(cities):
                    response_message += f"üö© <i>{city_name}</i>\n<i>–î–∞–ª–µ–µ</i> üëâ /order_{city_forkey}_{product_price_id}_{product_name_id}\n"
                    button_text = f"{city_name} order_{city_forkey}_{product_price_id}_{product_name_id}"
                    keyboard.add(types.KeyboardButton(button_text))
                    if index != len(cities) - 1:
                        response_message += "- - - - - - - - - - - - - - - -\n"

                response_message += ("\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                     "‚ìÇÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n"
                                     "<i>–ñ–º–∏</i> üëâ /menu")

                keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
                keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
                keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
                keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

                await message.answer(response_message, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
            else:
                await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.")

    @dp.message_handler(lambda message: re.search(r'order_([a-z0-9]{8})_(\d+)_(\d+)$', message.text))
    async def order_first_district_selection(message: types.Message, state: FSMContext):
        match = re.search(r'order_([a-z0-9]+)_(\d+)_(\d+)$', message.text)
        if match:
            city_forkey, product_price_id, product_name_id = match.groups()
            districts_raw = database.get_districts_by_city_and_product(city_forkey, int(product_price_id),
                                                                       int(product_name_id))

            district_set = set()
            district_details = {}
            for district_string, district_id in districts_raw:
                districts = district_string.split(':')
                first_district = districts[0] if districts[0].lower() != 'none' else None
                if first_district:
                    district_set.add(first_district)
                    third_district = districts[2].lower() if len(districts) > 2 else 'none'
                    next_step = "4" if third_district == 'none' else "2"
                    district_details[first_district] = {'id': district_id, 'next_step': next_step}

            product_name = database.get_product_name(int(product_name_id))
            price = database.get_product_price(int(product_price_id))
            discount = database.get_discount_by_product_name_id(product_name_id)
            discount_text = f" + —Å–∫–∏–¥–∫–∞ –¥–æ {discount}%" if discount and discount > 0 else ""

            district_texts = [
                f"üö© <i>{district}</i>\n<b>{discount_text}</b>\n<i>–í—ã–±—Ä–∞—Ç—å</i> üëâ /order_{city_forkey}_{district_details[district]['next_step']}_{product_price_id}_{product_name_id}_{district_details[district]['id']}"
                for district in district_set
            ]
            districts_message = "\n- - - - - - - - - - - - - - - -\n".join(district_texts)

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for district in district_set:
                command_text = f"order_{city_forkey}_{district_details[district]['next_step']}_{product_price_id}_{product_name_id}_{district_details[district]['id']}"
                button_text = f"{district} {command_text}"
                keyboard.add(types.KeyboardButton(button_text))

            keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
            keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
            keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
            keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

            response_message = (f"<b>{product_name}</b>\n\n"
                                f"‚ùóÔ∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n"
                                f"—É—Ç–æ—á–Ω–∏—Ç–µ —Ä–∞–π–æ–Ω:\n\n"
                                f"{districts_message}\n"
                                f"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                "‚ìÇÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n"
                                "<i>–ñ–º–∏</i> üëâ /menu\n")

            await message.answer(response_message, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)

    @dp.message_handler(lambda message: re.search(r'order_([a-z0-9]{8})_2_(\d+)_(\d+)_(\d+)$', message.text))
    async def order_second_district_selection(message: types.Message, state: FSMContext):
        match = re.search(r'order_([a-z0-9]+)_2_(\d+)_(\d+)_(\d+)$', message.text)
        if match:
            city_forkey, product_price_id, product_name_id, district_id = match.groups()

            third_districts = database.get_third_districts_by_filters(city_forkey, int(product_price_id),
                                                                      int(product_name_id), int(district_id))

            product_name = database.get_product_name(int(product_name_id))
            price = database.get_product_price(int(product_price_id))
            discount = database.get_discount_by_product_name_id(product_name_id)
            discount_text = f" + —Å–∫–∏–¥–∫–∞ –¥–æ {discount}%" if discount and discount > 0 else ""

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for district_id, district_name in third_districts:
                if district_name.lower() != 'none':
                    button_text = f"{district_name} order_{city_forkey}_4_{product_price_id}_{product_name_id}_{district_id}"
                    keyboard.add(types.KeyboardButton(button_text))

            keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
            keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
            keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
            keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

            districts_message = "\n- - - - - - - - - - - - - - - -\n".join([
                f"üö© <i>{district_name}</i>\n<b>{discount_text}</b>\n<i>–í—ã–±—Ä–∞—Ç—å</i> üëâ /order_{city_forkey}_4_{product_price_id}_{product_name_id}_{district_id}\n"
                for district_id, district_name in third_districts if district_name.lower() != 'none'
            ])

            if not districts_message:
                districts_message = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞."

            response_message = (f"<b>{product_name}</b>\n\n"
                                f"‚ùóÔ∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —É—Ç–æ—á–Ω–∏—Ç–µ —Ä–∞–π–æ–Ω:\n\n"
                                f"{districts_message}\n"
                                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                "‚ìÇÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n"
                                "<i>–ñ–º–∏</i> üëâ /menu")

            await message.answer(response_message, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)

    @dp.message_handler(lambda message: re.search(r'order_st_(\d+)_(\d+)', message.text))
    async def order_payment_method_selectio1n(message: types.Message, state: FSMContext):
        match = re.search(r'order_st_(\d+)_(\d+)', message.text)
        if match:
            city_id, product_id = match.groups()

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            city_forkey = database.get_city_forkey_by_id(city_id)
            product_details = database.get_product_details_by_id(product_id)

            if not city_forkey or not product_details:
                await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ –∏–ª–∏ –≥–æ—Ä–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                return

            product_name, price, city_name, district_name = product_details
            discount = database.get_discount_by_product_id(product_id)
            discount_text = f"<b>+ —Å–∫–∏–¥–∫–∞ –¥–æ {discount}%</b>" if discount and discount > 0 else ""

            active_payment_types = database.get_active_payment_types()

            response_message = (f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>\n\n")

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

            if 'btc' in active_payment_types:
                response_message += f"üí∞ <i>Bitcoin (BTC)</i> üëâ /order_{city_forkey}_22_5_{product_id}\n\n"
                keyboard.add(types.KeyboardButton(f"Bitcoin (BTC) order_{city_forkey}_22_5_{product_id}"))

            if 'ltc' in active_payment_types:
                response_message += f"üí∞ <i>Litecoin (LTC)</i> üëâ /order_{city_forkey}_24_5_{product_id}\n\n"
                keyboard.add(types.KeyboardButton(f"Litecoin (LTC) order_{city_forkey}_24_5_{product_id}"))

            response_message += f"üí∞ <i>–û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞</i> üëâ /order_{city_forkey}_35_5_{product_id}\n\n"
            keyboard.add(types.KeyboardButton(f"–û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞ order_{city_forkey}_35_5_{product_id}"))

            if 'card' in active_payment_types:
                response_message += f"üí∞ <i>–û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É –±–∞–Ω–∫–∞</i> üëâ /order_{city_forkey}_53_5_{product_id}\n\n"
                keyboard.add(types.KeyboardButton(f"–û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É –±–∞–Ω–∫–∞ order_{city_forkey}_53_5_{product_id}"))

            response_message += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n‚ìÇÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n<i>–ñ–º–∏</i> üëâ /menu"
            keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
            keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
            keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
            keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

            await message.answer(response_message, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)

    @dp.message_handler(lambda message: re.search(r'order_([a-z0-9]+)_4_(\d+)_(\d+)_(\d+)', message.text))
    async def order_payment_method_selection(message: types.Message, state: FSMContext):
        match = re.search(r'order_([a-z0-9]+)_4_(\d+)_(\d+)_(\d+)', message.text)
        if match:
            city_forkey, product_price_id, product_name_id, district_id = match.groups()

            district_forkey = database.get_district_forkey_by_id(district_id)
            product_id = database.get_product_id_by_details(int(product_name_id), int(product_price_id), city_forkey,
                                                            district_forkey)

            if product_id:
                product_name = database.get_product_name(int(product_name_id))
                price = database.get_product_price(int(product_price_id))
                discount = database.get_discount_by_product_name_id(int(product_name_id))
                discount_text = f"<b>+ —Å–∫–∏–¥–∫–∞ –¥–æ {discount}%</b>" if discount and discount > 0 else ""

                active_payment_types = database.get_active_payment_types()

                response_message = (f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>\n\n")

                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

                if 'btc' in active_payment_types:
                    response_message += f"üí∞ <i>Bitcoin (BTC)</i> üëâ /order_{city_forkey}_22_5_{product_id}\n{discount_text}\n\n"
                    keyboard.add(types.KeyboardButton(f"Bitcoin (BTC) order_{city_forkey}_22_5_{product_id}"))

                if 'ltc' in active_payment_types:
                    response_message += f"üí∞ <i>Litecoin (LTC)</i> üëâ /order_{city_forkey}_24_5_{product_id}\n{discount_text}\n\n"
                    keyboard.add(types.KeyboardButton(f"Litecoin (LTC) order_{city_forkey}_24_5_{product_id}"))

                response_message += f"üí∞ <i>–û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞</i> üëâ /order_{city_forkey}_35_5_{product_id}\n{discount_text}\n\n"
                keyboard.add(types.KeyboardButton(f"–û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞ order_{city_forkey}_35_5_{product_id}"))

                if 'card' in active_payment_types:
                    response_message += f"üí∞ <i>–û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É –±–∞–Ω–∫–∞</i> üëâ /order_{city_forkey}_53_5_{product_id}\n{discount_text}\n\n"
                    keyboard.add(types.KeyboardButton(f"–û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É –±–∞–Ω–∫–∞ order_{city_forkey}_53_5_{product_id}"))

                response_message += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n‚ìÇÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n<i>–ñ–º–∏</i> üëâ /menu"
                keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
                keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
                keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
                keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

                await message.answer(response_message, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
            else:
                await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

    @dp.message_handler(lambda message: re.search(r'order_([a-z0-9]+)_(22|24)_5_(\d+)', message.text), state=None)
    async def crypto_payment(message: types.Message, state: FSMContext):
        await OrderState.waiting_for_payment.set()

        match = re.search(r'order_([a-z0-9]+)_(22|24)_5_(\d+)', message.text)
        if match:
            forkey, payment_method, product_id = match.groups()

            discount = database.get_discount_by_product_id(int(product_id))

            product_detail = database.get_product_with_details_by_id(int(product_id))
            if product_detail:
                product_name = product_detail[0]
                price = product_detail[1]
                districts = product_detail[3].split(':')
                third_district = districts[2] if len(districts) > 2 and districts[2].lower() != 'none' else districts[0]
                order_number = database.get_and_increment_purchases_count()

                if payment_method == "22":
                    crypto_type = "BTC"
                    crypto_price = btc_price
                elif payment_method == "24":
                    crypto_type = "LTC"
                    crypto_price = ltc_price
                else:
                    await message.answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã.")
                    await state.finish()
                    return

                crypto_details = database.get_payment_details(crypto_type.lower())
                cf = database.get_payment_coefficient(crypto_type.lower())

                price = int(price * (1 - discount / 100) * cf)
                crypto_address = random.choice(
                    crypto_details.split('\n')) if crypto_details else f"{crypto_type} –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"

                price_crypto = round(price / crypto_price, 8)

                await state.update_data(
                    order_number=order_number,
                    crypto_type=crypto_type,
                    crypto_address=crypto_address,
                    price_rub=price,
                    price_crypto=price_crypto,
                    product_name=product_name,
                    third_district=third_district,
                    start_time=datetime.now()
                )

                response_message = (f"<b>üí∞ –í—ã –∑–∞–∫–∞–∑–∞–ª–∏</b>\n"
                                    f"{product_name} –Ω–∞ —Å—É–º–º—É {price} —Ä—É–±\n"
                                    f"–≤ —Ä–∞–π–æ–Ω–µ <b>{third_district}</b>.\n"
                                    f"–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å 59 –º–∏–Ω—É—Ç.\n"
                                    f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}.\n"
                                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                                    f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å <b>{crypto_type}:</b>\n"
                                    f"<b>{crypto_address}</b>\n"
                                    f"—Å—É–º–º—É <b>{price_crypto} {crypto_type}</b>\n\n"
                                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                    f"‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\n"
                                    f"<i>–ñ–º–∏</i> üëâ /order_check\n\n"
                                    f"üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n"
                                    f"<i>–ñ–º–∏</i> üëâ /order_cancel")

                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                keyboard.add(types.KeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"))
                keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
                keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
                keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
                keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

                await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ... –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
                await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await message.answer(response_message, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                await start_order_timer(message, state, order_number)
            else:
                await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                await state.finish()

    @dp.message_handler(lambda message: message.text not in ["/order_cancel", "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
                                                             "‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –æ—Ç–º–µ–Ω—É"] and message.text is not None,
                        state=OrderState.waiting_for_payment)
    async def check_order_payment(message: types.Message, state: FSMContext):
        data = await state.get_data()
        start_time = data['start_time']
        time_passed = datetime.now() - start_time
        time_left = timedelta(minutes=59) - time_passed

        if time_left.total_seconds() <= 0:
            await message.answer("–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏—Å—Ç–µ–∫–ª–æ.", reply_markup=types.ReplyKeyboardRemove())
            await state.finish()
            return

        product_name = data['product_name']
        third_district = data['third_district']
        order_number = data['order_number']
        price_rub = data['price_rub']
        crypto_type = data['crypto_type']
        crypto_address = data['crypto_address']
        price_crypto = data['price_crypto']

        response_message = (f"<b>‚ùóÔ∏è –í–∞—à –∑–∞–∫–∞–∑ –Ω–µ –æ–ø–ª–∞—á–µ–Ω!</b>\n"
                            f"{product_name} ({third_district}).\n"
                            f"–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å {int(time_left.total_seconds() // 60)} –º–∏–Ω—É—Ç.\n"
                            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}.\n"
                            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                            f"–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å <b>{price_rub} —Ä—É–±.</b>\n"
                            f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å {crypto_type}:\n"
                            f"<b>{crypto_address}</b>\n"
                            f"—Å—É–º–º—É <b>{price_crypto} {crypto_type}</b>\n"
                            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                            f"‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑\n"
                            f"–ñ–º–∏ üëâ /order_check\n\n"
                            f"üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n"
                            f"–ñ–º–∏ üëâ /order_cancel")

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(types.KeyboardButton('‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'), types.KeyboardButton('üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'))
        keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
        keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
        keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
        keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

        await message.answer(response_message, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)

    @dp.message_handler(lambda message: message.text in ["/order_cancel", "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"],
                        state=[OrderState.waiting_for_payment,
                               OrderManualPaymentState.waiting_for_manual_payment_confirmation,
                               OrderCardPaymentState.waiting_for_card_payment_confirmation,
                               OrderState.waiting_for_payment_balance, OrderState.waiting_for_payment_manualpay,
                               OrderState.waiting_for_payment_card])
    async def order_cancel_request(message: types.Message, state: FSMContext):
        data = await state.get_data()
        order_number = data['order_number']

        response_message = f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ #{order_number}?"

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(types.KeyboardButton('‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –æ—Ç–º–µ–Ω—É'), types.KeyboardButton('üè† –ú–µ–Ω—é'))
        keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
        keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
        keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
        keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

        await message.answer(response_message, reply_markup=keyboard)

    @dp.message_handler(lambda message: message.text == "‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –æ—Ç–º–µ–Ω—É", state=[OrderState.waiting_for_payment,
                                                                                        OrderManualPaymentState.waiting_for_manual_payment_confirmation,
                                                                                        OrderCardPaymentState.waiting_for_card_payment_confirmation,
                                                                                        OrderState.waiting_for_payment_balance,
                                                                                        OrderState.waiting_for_payment_manualpay,
                                                                                        OrderState.waiting_for_payment_card])
    async def order_cancel_confirm(message: types.Message, state: FSMContext):
        data = await state.get_data()
        order_number = data['order_number']
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_attempts = database.get_user_attempts(user_id, bot_token)
        user_attempts = int(user_attempts)
        if user_attempts <= 1:  # –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–æ–∫ 0 –∏–ª–∏ –º–µ–Ω—å—à–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–æ 4
            user_attempts = 4
        user_attempts -= 1  # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        database.update_user_attempts(user_id, bot_token, user_attempts)

        response_message = f"<b>‚ùóÔ∏è –í–∞—à –∑–∞–∫–∞–∑ {order_number} –æ—Ç–º–µ–Ω–µ–Ω!</b>\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n‚ìÇÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n<i>–ñ–º–∏</i> üëâ /menu"
        warning_message = f"‚ùóÔ∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!\n–ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –±–µ–∑ –æ–ø–ª–∞—Ç—ã –±–æ–ª–µ–µ 4 —Ä–∞–∑!\n–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {user_attempts} –ø–æ–ø—ã—Ç–æ–∫."

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
        keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
        keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
        keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

        await message.answer(response_message, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
        await message.answer(warning_message, reply_markup=keyboard)
        await state.finish()

    @dp.message_handler(lambda message: re.match(r'.*order_(.*)_35_5_(\d+)', message.text), state=None)
    async def balance_payment(message: types.Message, state: FSMContext):
        product_id = message.text.split('_')[5]
        price = database.get_product_price_by_product_id(product_id)

        if price is not None:
            response_message = (f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n"
                                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n\n"
                                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: {price} —Ä—É–±\n"
                                f"–ë–∞–ª–∞–Ω—Å: 0,0 —Ä—É–±")

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            keyboard.add(types.KeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"))
            keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
            keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
            keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
            keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

            await message.answer(response_message, reply_markup=keyboard)
        else:
            await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.finish()

    @dp.message_handler(lambda message: message.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
                        state=OrderBalanceState.waiting_for_balance_payment)
    async def order_cancel_from_balance(message: types.Message, state: FSMContext):
        await cmd_start(message, state)

    @dp.message_handler(lambda message: re.search(r'order_([a-z0-9]+)_10_5_(\d+)', message.text), state=None)
    async def manual_payment(message: types.Message, state: FSMContext):
        await OrderManualPaymentState.waiting_for_manual_payment_confirmation.set()

        match = re.search(r'order_([a-z0-9]+)_10_5_(\d+)', message.text)
        if match:
            forkey, product_id = match.groups()
            discount = database.get_discount_by_product_id(int(product_id))
            product_detail = database.get_product_with_details_by_id(int(product_id))

            if product_detail:
                product_name = product_detail[0]  # –ò–Ω–¥–µ–∫—Å 0 –¥–ª—è –∏–º–µ–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
                price = product_detail[1]  # –ò–Ω–¥–µ–∫—Å 1 –¥–ª—è —Ü–µ–Ω—ã
                districts = product_detail[3].split(':')  # –ò–Ω–¥–µ–∫—Å 3 –¥–ª—è —Ä–∞–π–æ–Ω–æ–≤
                third_district = districts[2] if len(districts) > 2 and districts[2].lower() != 'none' else districts[0]
                order_number = database.get_and_increment_purchases_count()
                price = int(price * (1 - discount / 100))

                await state.update_data(
                    order_number=order_number,
                    product_name=product_name,
                    price_rub=price,
                    third_district=third_district,
                    start_time=datetime.now()
                )

                response_message = (f"<b>üí∞ –í—ã –∑–∞–∫–∞–∑–∞–ª–∏</b>\n"
                                    f"{product_name} –Ω–∞ —Å—É–º–º—É {price} —Ä—É–±\n"
                                    f"–≤ —Ä–∞–π–æ–Ω–µ <b>{third_district}</b>.\n"
                                    f"–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å 59 –º–∏–Ω—É—Ç.\n"
                                    f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}.\n"
                                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                                    f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É\n"
                                    f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –†–µ–∫–≤–∏–∑–∏—Ç–æ–≤ -  –ø–æ –ø–æ–≤–æ–¥—É –æ–ø–ª–∞—Ç –ø–∏—Å–∞—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –Æ–∑–µ—Ä @tash_pooli001\n\n\n"
                                    f"–í–ù–ò–ú–ê–ù–ò–ï\n"
                                    f"–ü–û–Ø–í–ò–õ–û–°–¨ –û–ß–ï–ù–¨ –ú–ù–û–ì–û –§–ï–ô–ö–û–í–´–• –ê–ö–ö–ê–£–ù–¢–û–í –ü–†–û–î–ê–Æ–©–ò–• –¢–û–í–ê–† –ü–û–î –ù–ê–®–ò–ú –ò–ú–ï–ù–ï–ú, –ß–¢–û –ë–´ –ù–ï –°–¢–ê–¢–¨ –û–ë–ú–ê–ù–£–¢–´–ú –ù–ê –î–ï–ù–¨–ì–ò –ò–õ–ò –ü–û–õ–£–ß–ò–¢–¨ –ü–û –ù–ê–°–¢–û–Ø–©–ï–ú–£ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô –¢–û–í–ê–†, –ó–ê–ü–û–ú–ù–ò–¢–ï –ù–ê–® –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê +888 0439 2371 , –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Å –Ω–∞–º–∏,–ø–æ—ç—Ç–æ–º—É –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã.\n"
                                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                    f"‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\n"
                                    f"–ñ–º–∏ üëâ /order_check\n\n"
                                    f"üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n"
                                    f"–ñ–º–∏ üëâ /order_cancel")

                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                keyboard.add(types.KeyboardButton('üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'))
                keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
                keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
                keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
                keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

                await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ... –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
                await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await message.answer(response_message, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                await start_order_timer2(message, state, order_number, "hand_payment")
            else:
                await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                await state.finish()

    @dp.message_handler(lambda message: re.search(r'order_([a-z0-9]+)_53_5_(\d+)', message.text), state=None)
    async def card_payment(message: types.Message, state: FSMContext):
        await OrderCardPaymentState.waiting_for_card_payment_confirmation.set()

        match = re.search(r'order_([a-z0-9]+)_53_5_(\d+)', message.text)
        if match:
            forkey, product_id = match.groups()
            product_detail = database.get_product_with_details_by_id(int(product_id))

            if product_detail:
                product_name = product_detail[0]  # –ò–Ω–¥–µ–∫—Å 0 –¥–ª—è –∏–º–µ–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
                price = product_detail[1]  # –ò–Ω–¥–µ–∫—Å 1 –¥–ª—è —Ü–µ–Ω—ã
                districts = product_detail[3].split(':')  # –ò–Ω–¥–µ–∫—Å 3 –¥–ª—è —Ä–∞–π–æ–Ω–æ–≤
                third_district = districts[2] if len(districts) > 2 and districts[2].lower() != 'none' else districts[0]
                order_number = database.get_and_increment_purchases_count()

                card_details = database.get_payment_details('card')
                cf = database.get_payment_coefficient('card')

                discount = database.get_discount_by_product_id(int(product_id))
                price = int(price * (1 - discount / 100))
                price_fee = int(price * cf)

                await state.update_data(
                    order_number=order_number,
                    product_name=product_name,
                    price_rub=price_fee,
                    third_district=third_district,
                    start_time=datetime.now(),
                    payment_details=card_details
                )

                response_message = (f"üí∞ –í—ã –∑–∞–∫–∞–∑–∞–ª–∏\n"
                                    f"<b>{product_name}</b> –Ω–∞ —Å—É–º–º—É <b>{price_fee} —Ä—É–±</b>\n"
                                    f"–≤ —Ä–∞–π–æ–Ω–µ <b>{third_district}</b>.\n"
                                    f"–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å 40 –º–∏–Ω—É—Ç.\n"
                                    f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}.\n"
                                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                                    f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É\n"
                                    f"{card_details}\n"
                                    f"—Ç–æ—á–Ω—É—é —Å—É–º–º—É –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π {price_fee} —Ä—É–±.\n\n"
                                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                    f"‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\n"
                                    f"–ñ–º–∏ üëâ /order_check\n\n"
                                    f"üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n"
                                    f"–ñ–º–∏ üëâ /order_cancel")

                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                keyboard.add(types.KeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"))
                keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
                keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
                keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
                keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

                await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ... –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
                await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await message.answer(response_message, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
                await start_order_timer2(message, state, order_number, "card")
            else:
                await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                await state.finish()

    @dp.message_handler(lambda message: message.text not in ["/order_cancel", "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
                                                             "‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –æ—Ç–º–µ–Ω—É"] and message.text is not None,
                        state=OrderManualPaymentState.waiting_for_manual_payment_confirmation)
    async def check_order_manual_payment(message: types.Message, state: FSMContext):
        data = await state.get_data()
        start_time = data['start_time']
        time_passed = datetime.now() - start_time
        time_left = timedelta(minutes=59) - time_passed

        product_name = data['product_name']
        third_district = data['third_district']
        order_number = data['order_number']
        price_rub = data['price_rub']

        if time_left.total_seconds() <= 0:
            response_message = "–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏—Å—Ç–µ–∫–ª–æ."
            await message.answer(response_message, reply_markup=types.ReplyKeyboardRemove())
            await state.finish()
        else:
            response_message = (f"<b>üí∞ –í—ã –∑–∞–∫–∞–∑–∞–ª–∏</b>\n"
                                f"{product_name} –Ω–∞ —Å—É–º–º—É {price_rub} —Ä—É–±\n"
                                f"–≤ —Ä–∞–π–æ–Ω–µ <b>{third_district}.</b>\n"
                                f"–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å {int(time_left.total_seconds() // 60)} –º–∏–Ω—É—Ç.\n"
                                f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}.\n"
                                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                                    f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É\n"
                                    f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –†–µ–∫–≤–∏–∑–∏—Ç–æ–≤ -  –ø–æ –ø–æ–≤–æ–¥—É –æ–ø–ª–∞—Ç –ø–∏—Å–∞—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –Æ–∑–µ—Ä @tash_pooli001\n\n\n"
                                    f"–í–ù–ò–ú–ê–ù–ò–ï\n"
                                    f"–ü–û–Ø–í–ò–õ–û–°–¨ –û–ß–ï–ù–¨ –ú–ù–û–ì–û –§–ï–ô–ö–û–í–´–• –ê–ö–ö–ê–£–ù–¢–û–í –ü–†–û–î–ê–Æ–©–ò–• –¢–û–í–ê–† –ü–û–î –ù–ê–®–ò–ú –ò–ú–ï–ù–ï–ú, –ß–¢–û –ë–´ –ù–ï –°–¢–ê–¢–¨ –û–ë–ú–ê–ù–£–¢–´–ú –ù–ê –î–ï–ù–¨–ì–ò –ò–õ–ò –ü–û–õ–£–ß–ò–¢–¨ –ü–û –ù–ê–°–¢–û–Ø–©–ï–ú–£ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô –¢–û–í–ê–†, –ó–ê–ü–û–ú–ù–ò–¢–ï –ù–ê–® –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê +888 0439 2371 , –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Å –Ω–∞–º–∏,–ø–æ—ç—Ç–æ–º—É –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã.\n"
                                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                    f"‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\n"
                                    f"–ñ–º–∏ üëâ /order_check\n\n"
                                    f"üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n"
                                    f"–ñ–º–∏ üëâ /order_cancel")

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            keyboard.add(types.KeyboardButton('‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'), types.KeyboardButton('üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'))
            keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
            keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
            keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
            keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

            await message.answer(response_message, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)

    @dp.message_handler(lambda message: re.match('.*order_st_([a-z0-9]+)_10_5_(\\d+)', message.text), state=None)
    async def manual_payment(message: types.Message, state: FSMContext):
        await OrderManualPaymentState.waiting_for_manual_payment_confirmation.set()

        match = re.search('.*order_st_([a-z0-9]+)_10_5_(\\d+)', message.text)
        if match:
            forkey, product_id = match.groups()
            discount = database.get_discount_by_product_id(product_id)
            product_detail = database.get_product_with_details_by_id(product_id)

            if product_detail:
                product_name = product_detail['product_name']
                districts = product_detail['district'].split(':')
                third_district = districts[2] if len(districts) > 2 and districts[2].lower() != 'none' else districts[0]
                order_number = database.get_and_increment_purchases_count()
                price = product_detail['price']
                price = int(price * (1 - discount / 100))

                await state.update_data(
                    order_number=order_number,
                    product_name=product_name,
                    price_rub=price,
                    third_district=third_district,
                    start_time=datetime.now()
                )

                response_message = (f"<b>üí∞ –í—ã –∑–∞–∫–∞–∑–∞–ª–∏</b>\n"
                                    f"{product_name} –Ω–∞ —Å—É–º–º—É {price} —Ä—É–±\n"
                                    f"–≤ —Ä–∞–π–æ–Ω–µ <b>{third_district}</b>.\n"
                                    f"–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å 59 –º–∏–Ω—É—Ç.\n"
                                    f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}.\n"
                                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                                    f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É\n"
                                    f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –†–µ–∫–≤–∏–∑–∏—Ç–æ–≤ -  –ø–æ –ø–æ–≤–æ–¥—É –æ–ø–ª–∞—Ç –ø–∏—Å–∞—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –Æ–∑–µ—Ä @tash_pooli001\n\n\n"
                                    f"–í–ù–ò–ú–ê–ù–ò–ï\n"
                                    f"–ü–û–Ø–í–ò–õ–û–°–¨ –û–ß–ï–ù–¨ –ú–ù–û–ì–û –§–ï–ô–ö–û–í–´–• –ê–ö–ö–ê–£–ù–¢–û–í –ü–†–û–î–ê–Æ–©–ò–• –¢–û–í–ê–† –ü–û–î –ù–ê–®–ò–ú –ò–ú–ï–ù–ï–ú, –ß–¢–û –ë–´ –ù–ï –°–¢–ê–¢–¨ –û–ë–ú–ê–ù–£–¢–´–ú –ù–ê –î–ï–ù–¨–ì–ò –ò–õ–ò –ü–û–õ–£–ß–ò–¢–¨ –ü–û –ù–ê–°–¢–û–Ø–©–ï–ú–£ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô –¢–û–í–ê–†, –ó–ê–ü–û–ú–ù–ò–¢–ï –ù–ê–® –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê +888 0439 2371 , –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Å –Ω–∞–º–∏,–ø–æ—ç—Ç–æ–º—É –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã.\n"
                                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                    f"‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\n"
                                    f"–ñ–º–∏ üëâ /order_check\n\n"
                                    f"üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n"
                                    f"–ñ–º–∏ üëâ /order_cancel")

                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                keyboard.add(types.KeyboardButton('üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'))
                keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
                keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
                keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
                keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

                await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ... –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
                await asyncio.sleep(1)
                await message.answer(response_message, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)
            else:
                await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                await state.finish()

    @dp.message_handler(lambda message: message.text not in ["/order_cancel", "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
                                                             "‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –æ—Ç–º–µ–Ω—É"] and message.text is not None,
                        state=OrderCardPaymentState.waiting_for_card_payment_confirmation)
    async def check_card_payment(message: types.Message, state: FSMContext):
        data = await state.get_data()
        start_time = data['start_time']
        time_passed = datetime.now() - start_time
        time_left = timedelta(minutes=40) - time_passed  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ 40 –º–∏–Ω—É—Ç

        response_message = (f"‚ùóÔ∏è –í–∞—à –∑–∞–∫–∞–∑ –Ω–µ –æ–ø–ª–∞—á–µ–Ω!\n"
                            f"{data['product_name']} \n"
                            f"–≤ —Ä–∞–π–æ–Ω–µ {data['third_district']}.\n"
                            f"–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å {max(int(time_left.total_seconds() // 60), 0)} –º–∏–Ω—É—Ç.\n"
                            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {data['order_number']}.\n"
                            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                            f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É\n"
                            f"{data['payment_details']}\n"
                            f"—Ç–æ—á–Ω—É—é —Å—É–º–º—É –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π {data['price_rub']} —Ä—É–±.\n\n"
                            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                            f"‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\n"
                            f"–ñ–º–∏ üëâ /order_check\n\n"
                            f"üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n"
                            f"–ñ–º–∏ üëâ /order_cancel")

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(types.KeyboardButton('‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'), types.KeyboardButton('üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'))
        keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
        keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
        keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
        keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

        await message.answer(response_message, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)

    @dp.message_handler(lambda message: message.text == '‚ùì –ü–æ–º–æ—â—å')
    async def help_handler(message: types.Message):
        help_message = "–û–ø–µ—Ä–∞—Ç–æ—Ä -  @tash_pooli001"

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
        keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
        keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
        keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

        await message.answer(help_message, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)

    @dp.message_handler(lambda message: message.text in ["/locations", "üëâ –õ–æ–∫–∞—Ü–∏–∏"], state=None)
    async def show_locations(message: types.Message, state: FSMContext):
        cities = database.get_cities_with_ids()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not cities:
            await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        locations_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

        locations_message = "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω</b>\n\n"
        for index, (city_id, city_name) in enumerate(cities):

            discount = database.get_maximum_discount_by_city_id(city_id)
            discount_text = f"\n + —Å–∫–∏–¥–∫–∞ –¥–æ {discount}%" if discount > 0 else ""

            button_text = f"{city_name} location_{city_id}"
            locations_keyboard.add(types.KeyboardButton(button_text))
            locations_message += f"üö© <i>{city_name}</i><b>{discount_text}</b>\n<i>–ñ–º–∏</i> üëâ /location_{city_id}\n"
            if index != len(cities) - 1:
                locations_message += "- - - - - - - - - - - - - - - -\n"

        locations_message += "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n‚ìÇÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n<i>–ñ–º–∏</i> üëâ /menu"

        locations_keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
        locations_keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
        locations_keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
        locations_keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

        await message.answer(locations_message, reply_markup=locations_keyboard, parse_mode=types.ParseMode.HTML)

    @dp.message_handler(lambda message: re.match('.*location_(\\d+)$', message.text))
    async def show_districts(message: types.Message, state: FSMContext):
        city_id_match = re.match('.*location_(\\d+)', message.text)
        if city_id_match:
            city_id = city_id_match.group(1)
            districts = database.get_districts_by_city_id(city_id)

            if not districts:
                await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–π–æ–Ω—ã –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                return

            city_name = database.get_city_name(city_id)
            response_message = f"<b>{city_name}</b>\n–£—Ç–æ—á–Ω–∏—Ç–µ —Ä–∞–π–æ–Ω:\n\n"
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

            seen_districts = set()
            district_info = []
            for district_id, district_name in districts:
                first_district = district_name.split(':')[0]
                if first_district not in seen_districts:
                    seen_districts.add(first_district)
                    district_info.append((district_id, first_district))

            for index, (district_id, first_district) in enumerate(district_info):
                discount = database.get_maximum_discount_by_district_id(district_id)
                discount_text = f" + —Å–∫–∏–¥–∫–∞ –¥–æ {discount}%" if discount > 0 else ""

                third_districts = database.get_third_districts_by_first_district_id_and_city_id2(district_id, city_id)
                if any(third_district_name.lower() == 'none' for third_district_id, third_district_name in
                       third_districts):
                    button_text = f"{first_district} location_7_{district_id}_{city_id}"
                    response_message += f"üèò <i>{first_district}</i>\n<b>{discount_text}</b>\n<i>–ñ–º–∏</i> üëâ /location_7_{district_id}_{city_id}\n"
                else:
                    button_text = f"{first_district} location_{district_id}_{city_id}"
                    response_message += f"üèò <i>{first_district}</i>\n<b>{discount_text}</b>\n<i>–ñ–º–∏</i> üëâ /location_{district_id}_{city_id}\n"

                keyboard.add(types.KeyboardButton(button_text))

                if index < len(district_info) - 1:
                    response_message += "- - - - - - - - - - - - - - - -\n"

            keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
            keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
            keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
            keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

            response_message += "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n‚ìÇÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n<i>–ñ–º–∏</i> üëâ /menu"

            await message.answer(response_message, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)

    @dp.message_handler(lambda message: re.match(r'^.*location_(\d+)_(\d+)$', message.text))
    async def show_third_district_selection(message: types.Message, state: FSMContext):
        match = re.match(r'^.*location_(\d+)_(\d+)$', message.text)
        if match:
            first_district_id, city_id = match.groups()
            unique_third_districts = database.get_third_districts_by_first_district_id_and_city_id2(first_district_id,
                                                                                                    city_id)

            if not unique_third_districts:
                await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                return

            city_name = database.get_city_name(city_id)
            response_message = f"<b>{city_name}</b>\n–£—Ç–æ—á–Ω–∏—Ç–µ —Ä–∞–π–æ–Ω:\n\n"
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

            sorted_unique_third_districts = sorted(unique_third_districts, key=lambda x: x[1])
            count_districts = len(sorted_unique_third_districts)

            for index, (third_district_id, third_district_name) in enumerate(sorted_unique_third_districts):
                discount = database.get_maximum_discount_by_district_id(third_district_id)
                discount_text = f" + —Å–∫–∏–¥–∫–∞ –¥–æ {discount}%" if discount > 0 else ""

                button_text = f"{third_district_name} location_7_{third_district_id}_{city_id}"
                keyboard.add(types.KeyboardButton(button_text))
                response_message += f"üèò <i>{third_district_name}</i>\n<b>{discount_text}</b>\n<i>–í—ã–±—Ä–∞—Ç—å</i> üëâ /location_7_{third_district_id}_{city_id}\n"

                if index != count_districts - 1:
                    response_message += "- - - - - - - - - - - - - - - -\n"

            keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
            keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
            keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
            keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

            response_message += "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n‚ìÇÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n<i>–ñ–º–∏</i> üëâ /menu+"

            await message.answer(response_message, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)

    @dp.message_handler(lambda message: re.search(r'location_7_(\d+)_(\d+)$', message.text.strip()))
    async def show_product_details_for_district(message: types.Message, state: FSMContext):
        match = re.search(r'location_7_(\d+)_(\d+)$', message.text)
        if match:
            third_district_id, city_id = match.groups()

            city_name = database.get_city_name(city_id)
            city_forkey = database.get_city_forkey_by_id(city_id)

            if not city_name or not city_forkey:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–µ.")
                return

            products = database.get_products_by_district_and_city(third_district_id, city_id)

            if not products:
                await message.reply(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞–π–æ–Ω–µ –∏ –≥–æ—Ä–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                return

            response_message = f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä</b>\n–≤ —Ä–∞–π–æ–Ω–µ {city_name}\n\n"
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

            for index, (product_id, product_name, product_price) in enumerate(products):
                discount = database.get_discount_by_product_id(product_id)
                discount_text = f"<b> \n+ —Å–∫–∏–¥–∫–∞ –¥–æ {discount}%</b>" if discount > 0 else ""

                product_price_id = database.get_product_price_id_by_price(product_price)
                product_name_id = database.get_product_name_id_by_name(product_name)
                order_button_text = f"{product_name} {int(product_price)}—Ä—É–± order_{city_forkey}_4_{product_price_id}_{product_name_id}_{third_district_id}"
                keyboard.add(types.KeyboardButton(order_button_text))
                response_message += f"üì¶ {product_name} <b>{int(product_price)} —Ä—É–±</b> {discount_text}\n<i>–ó–∞–∫–∞–∑–∞—Ç—å</i> üëâ /order_{city_forkey}_4_{product_price_id}_{product_name_id}_{third_district_id}\n"

                if index != len(products) - 1:
                    response_message += "- - - - - - - - - - - - - - - -\n"

            keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
            keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
            keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
            keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

            response_message += "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n‚ìÇÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n<i>–ñ–º–∏</i> üëâ /menu"

            await message.answer(response_message, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)

    @dp.message_handler(lambda message: message.text == "üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑" or message.text == "/last_order")
    async def handle_last_order(message: types.Message):
        user_id = message.from_user.id

        last_buy_id = database.get_last_buy_id_by_user(user_id, bot_token)

        if last_buy_id and database.check_last_buy_available(last_buy_id):
            last_buy_text = database.get_last_buy_text(last_buy_id)
            response_message = last_buy_text
        else:
            last_buy_id = database.get_random_last_buy_id()

            if last_buy_id:
                last_buy_text = database.get_last_buy_text(last_buy_id)
                database.update_user_last_buy(user_id, last_buy_id, bot_token)
                response_message = last_buy_text
            else:
                response_message = ("<b>‚ùóÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é,</b>\n"
                                    "—É –Ω–∞—Å –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –í–∞—à–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–∫–∞–∑–µ.\n"
                                    "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                    "‚ìÇÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n"
                                    "<i>–ñ–º–∏</i> üëâ /menu")

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
        keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
        keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
        keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

        await message.answer(response_message, reply_markup=keyboard, parse_mode=types.ParseMode.HTML)

    @dp.message_handler(lambda message: message.text == "/balance" or message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
    async def handle_balance(message: types.Message):
        response_message = "–ë–∞–ª–∞–Ω—Å: 0,00 —Ä—É–±"

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
        keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
        keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
        keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

        await message.answer(response_message, reply_markup=keyboard)

    @dp.message_handler(lambda message: message.text == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
    async def handle_balance_replenishment(message: types.Message):
        response_message = ("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞–∫—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n\n"
                            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –º–µ–Ω–µ–µ 300 —Ä—É–± –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–µ –±–æ–ª–µ–µ 10000 —Ä—É–±.")
        await message.answer(response_message)
        await BalanceStates.replenishment_amount.set()

    @dp.message_handler(state=BalanceStates.replenishment_amount)
    async def process_replenishment_amount(message: types.Message, state: FSMContext):
        try:
            amount = int(message.text)
            if 300 <= amount <= 10000:
                response_message = f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É {amount}?"
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                keyboard.add(types.KeyboardButton(f"‚òëÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ up_balance_{amount}"))
                keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
                keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
                keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
                keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                await message.answer(response_message, reply_markup=keyboard)
                await state.finish()
                return
        except ValueError:
            pass

        # –ï—Å–ª–∏ —Å—É–º–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
        response_message = ("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞–∫—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n\n"
                            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –º–µ–Ω–µ–µ 300 —Ä—É–± –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–µ –±–æ–ª–µ–µ 10000 —Ä—É–±.")
        await message.answer(response_message)

    @dp.message_handler(lambda message: re.match('.*up_balance_(\\d+)$', message.text))
    async def process_up_balance_command(message: types.Message):
        amount_match = re.match('.*up_balance_(\\d+)', message.text)
        if amount_match:
            amount = int(amount_match.group(1))
            await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ... –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
            await asyncio.sleep(1)

            active_payment_types = database.get_active_payment_types()

            payment_options = {
                'btc': f"<i>üí∞ Bitcoin (BTC)</i> üëâ /up_balance{amount}_22",
                'ltc': f"<i>üí∞ Litecoin (LTC)</i> üëâ /up_balance{amount}_24",
                'card': [f"<i>üí∞ –†—É—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞</i> üëâ /up_balance{amount}_10",
                         f"<i>üí∞ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –±–∞–Ω–∫–∞</i> üëâ /up_balance{amount}_53"]
            }

            response_message = "‚ùóÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n\n"
            for payment_type, info in payment_options.items():
                if payment_type in active_payment_types:
                    if isinstance(info, list):
                        for item in info:
                            response_message += f"{item}\n\n"
                    else:
                        response_message += f"{info}\n\n"

            response_message += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n‚ìÇÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n<i>–ñ–º–∏</i> üëâ /menu"

            # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
            keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
            keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
            keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

            await message.answer(response_message, parse_mode="HTML", reply_markup=keyboard)

    @dp.message_handler(lambda message: re.match(r'.*up_balance(\d+)_(22|24)', message.text), state=None)
    async def crypto_payment(message: types.Message, state: FSMContext):
        await OrderState.waiting_for_payment_balance.set()

        match = re.match(r'.*up_balance(\d+)_(22|24)', message.text)
        rub_amount, payment_method = match.groups()

        crypto_type = None
        crypto_price = 0

        if payment_method == "22":
            crypto_type = "BTC"
            crypto_price = btc_price  # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã BTC
        elif payment_method == "24":
            crypto_type = "LTC"
            crypto_price = ltc_price  # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã LTC

        if not crypto_type:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ –ø–ª–∞—Ç–µ–∂–∞.")
            await state.finish()
            return

        cf = database.get_payment_coefficient(crypto_type.lower())  # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –∫—Ä–∏–ø—Ç–æ-–≤–∞–ª—é—Ç—ã

        crypto_details = database.get_payment_details(crypto_type.lower())
        crypto_addresses = crypto_details.split('\n')
        crypto_address = random.choice(crypto_addresses) if crypto_addresses else f"{crypto_type} –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"

        price_crypto = round(int(rub_amount) / crypto_price * cf, 8)  # –£–º–Ω–æ–∂–∞–µ–º —Å—É–º–º—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç

        order_number = database.get_and_increment_purchases_count()
        start_time = datetime.now()

        await state.update_data(
            order_number=order_number,
            crypto_type=crypto_type,
            crypto_address=crypto_address,
            rub_amount=rub_amount,
            price_crypto=price_crypto,
            start_time=start_time
        )

        response_message = (f"üí∞ –í—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—É–º–º—É {rub_amount} —Ä—É–±.\n"
                            f"–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å 59 –º–∏–Ω—É—Ç.\n"
                            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}.\n"
                            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                            f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å {crypto_type}:\n"
                            f"{crypto_address}\n"
                            f"—Å—É–º–º—É {price_crypto:.8f} {crypto_type}\n\n"
                            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                            f"‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\n"
                            f"–ñ–º–∏ üëâ /order_check\n\n"
                            f"üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n"
                            f"–ñ–º–∏ üëâ /order_cancel")

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(types.KeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"))
        keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
        keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
        keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
        keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

        await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ... –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        await asyncio.sleep(1)
        await message.answer(response_message, reply_markup=keyboard, parse_mode="HTML")

    @dp.message_handler(lambda message: message.text not in ["/order_cancel", "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
                                                             "‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –æ—Ç–º–µ–Ω—É"] and message.text is not None,
                        state=OrderState.waiting_for_payment_balance)
    async def check_order_payment(message: types.Message, state: FSMContext):
        data = await state.get_data()
        start_time = data['start_time']
        time_passed = datetime.now() - start_time
        time_left = timedelta(minutes=59) - time_passed

        order_number = data['order_number']
        rub_amount = data['rub_amount']
        crypto_type = data['crypto_type']
        crypto_address = data['crypto_address']
        price_crypto = data['price_crypto']

        minutes_left = max(int(time_left.total_seconds() // 60), 0)  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ

        if time_left.total_seconds() <= 0:
            await message.answer("–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏—Å—Ç–µ–∫–ª–æ.", reply_markup=types.ReplyKeyboardRemove())
            await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        else:
            response_message = (
                f"‚ùóÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–µ–º,\n"
                f"—á—Ç–æ –≤—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—É–º–º—É {rub_amount} —Ä—É–±.\n"
                f"–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å {minutes_left} –º–∏–Ω—É—Ç.\n"
                f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}.\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å {crypto_type}:\n"
                f"{crypto_address}\n"
                f"—Å—É–º–º—É {price_crypto:.8f} {crypto_type} BTC\n\n"  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ .8f –Ω—É–∂–Ω–æ –¥–ª—è BTC –∏ LTC –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                "‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\n"
                "–ñ–º–∏ üëâ /order_check\n\n"
                "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n"
                "–ñ–º–∏ üëâ /order_cancel"
            )

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            keyboard.add(types.KeyboardButton("‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"), types.KeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"))
            keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
            keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
            keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
            keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

            await message.answer(response_message, reply_markup=keyboard, parse_mode="HTML")

    @dp.message_handler(lambda message: re.match(r'.*up_balance(\d+)_10', message.text), state=None)
    async def manual_payment_initiation(message: types.Message, state: FSMContext):
        await OrderState.waiting_for_payment_manualpay.set()

        match = re.match(r'.*up_balance(\d+)_10', message.text)
        rub_amount = float(match.group(1))
        rub_amount_fee = convert(rub_amount)
        rub_amount_fee = int(rub_amount_fee)

        order_number = database.get_and_increment_purchases_count()
        start_time = datetime.now()

        await state.update_data(
            order_number=order_number,
            rub_amount=rub_amount_fee,
            start_time=start_time
        )

        response_message = (
            f"üí∞ –í—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—É–º–º—É {rub_amount_fee} —Ä—É–±.\n"
            "–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å 59 –º–∏–Ω—É—Ç.\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}.\n\n"
                                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                                    f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É\n"
                                    f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –†–µ–∫–≤–∏–∑–∏—Ç–æ–≤ -  –ø–æ –ø–æ–≤–æ–¥—É –æ–ø–ª–∞—Ç –ø–∏—Å–∞—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –Æ–∑–µ—Ä @tash_pooli001\n\n\n"
                                    f"–í–ù–ò–ú–ê–ù–ò–ï\n"
                                    f"–ü–û–Ø–í–ò–õ–û–°–¨ –û–ß–ï–ù–¨ –ú–ù–û–ì–û –§–ï–ô–ö–û–í–´–• –ê–ö–ö–ê–£–ù–¢–û–í –ü–†–û–î–ê–Æ–©–ò–• –¢–û–í–ê–† –ü–û–î –ù–ê–®–ò–ú –ò–ú–ï–ù–ï–ú, –ß–¢–û –ë–´ –ù–ï –°–¢–ê–¢–¨ –û–ë–ú–ê–ù–£–¢–´–ú –ù–ê –î–ï–ù–¨–ì–ò –ò–õ–ò –ü–û–õ–£–ß–ò–¢–¨ –ü–û –ù–ê–°–¢–û–Ø–©–ï–ú–£ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô –¢–û–í–ê–†, –ó–ê–ü–û–ú–ù–ò–¢–ï –ù–ê–® –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê +888 0439 2371 , –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Å –Ω–∞–º–∏,–ø–æ—ç—Ç–æ–º—É –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã.\n"
                                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                    f"‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\n"
                                    f"–ñ–º–∏ üëâ /order_check\n\n"
                                    f"üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n"
                                    f"–ñ–º–∏ üëâ /order_cancel")

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(types.KeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"))
        keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
        keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
        keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
        keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

        await message.answer(response_message, reply_markup=keyboard, parse_mode="HTML")

    @dp.message_handler(lambda message: message.text not in ["/order_cancel", "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
                                                             "‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –æ—Ç–º–µ–Ω—É"] and message.text is not None,
                        state=OrderState.waiting_for_payment_manualpay)
    async def check_order_manual_payment(message: types.Message, state: FSMContext):
        data = await state.get_data()
        start_time = data['start_time']
        time_passed = datetime.now() - start_time
        time_left = timedelta(minutes=59) - time_passed
        minutes_left = max(int(time_left.total_seconds() // 60), 0)

        order_number = data['order_number']
        rub_amount = data['rub_amount']
        rub_amount = int(convert(rub_amount))
        rub_amount_fee = convert(rub_amount)

        response_message = (
            "‚ùóÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–µ–º,\n"
            f"—á—Ç–æ –≤—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—É–º–º—É {rub_amount} —Ä—É–±.\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}.\n"
            f"–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å {minutes_left} –º–∏–Ω—É—Ç.\n\n"
                                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                                    f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É +888 0439 2371 (–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã!)\n"
                                    f"—Ç–µ–∫—Å—Ç –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
                                    f"<b>–ü–ï–†–ï–î –ö–ê–ñ–î–û–ô –û–ü–õ–ê–¢–û–ô</b> —É—Ç–æ—á–Ω—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ø–æ—Ç–µ—Ä–∏ –≤–∞—à–∏—Ö –¥–µ–Ω–µ–≥!\n\n"
                                    f"<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –°–æ–æ–±—â–∞—Ç—å –æ–± –æ–ø–ª–∞—Ç–µ –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –∞ –Ω–µ –±–æ—Ç—É! –û–¥–Ω–∞–∫–æ –∞–¥—Ä–µ—Å –≤—ã–¥–∞—Å—Ç –í–∞–º –±–æ—Ç.\n"
                                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                    f"‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\n"
                                    f"–ñ–º–∏ üëâ /order_check\n\n"
                                    f"üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n"
                                    f"–ñ–º–∏ üëâ /order_cancel")

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(types.KeyboardButton("‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"), types.KeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"))
        keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
        keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
        keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
        keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

        await message.answer(response_message, reply_markup=keyboard, parse_mode="HTML")

    @dp.message_handler(lambda message: re.match(r'.*up_balance(\d+)_53', message.text), state=None)
    async def card_payment(message: types.Message, state: FSMContext):
        await OrderState.waiting_for_payment_card.set()

        match = re.match(r'.*up_balance(\d+)_53', message.text)
        rub_amount = match.group(1)
        cf = database.get_payment_coefficient("card")
        rub_amount_with_fee = int(rub_amount) * cf
        rub_amount_with_fee = convert(rub_amount_with_fee)

        order_number = database.get_and_increment_purchases_count()
        card_details = database.get_payment_details('card').split('\n')
        random_card = random.choice(card_details) if card_details else "–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        await state.update_data(
            order_number=order_number,
            rub_amount=rub_amount,
            rub_amount_with_fee=rub_amount,
            card_number=random_card,
            start_time=datetime.now()
        )

        response_message = (
            f"üí∞ –í—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—É–º–º—É {rub_amount} —Ä—É–±.\n"
            "–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å 40 –º–∏–Ω—É—Ç.\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}.\n"
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
            "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É\n"
            f"{random_card}\n"
            f"—Ç–æ—á–Ω—É—é —Å—É–º–º—É –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π {rub_amount_with_fee} —Ä—É–±.\n\n"
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            "‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\n"
            "–ñ–º–∏ üëâ /order_check\n\n"
            "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n"
            "–ñ–º–∏ üëâ /order_cancel"
        )

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(types.KeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"))
        keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
        keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
        keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
        keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

        await message.answer(response_message, reply_markup=keyboard, parse_mode="HTML")

    @dp.message_handler(lambda message: message.text not in ["/order_cancel", "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
                                                             "‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –æ—Ç–º–µ–Ω—É"] and message.text is not None,
                        state=OrderState.waiting_for_payment_card)
    async def check_card_payment(message: types.Message, state: FSMContext):
        data = await state.get_data()
        start_time = data['start_time']
        time_passed = datetime.now() - start_time
        time_left = timedelta(minutes=40) - time_passed
        rub_amount = data['rub_amount']
        rub_amount_with_fee = float(data['rub_amount_with_fee'])
        cf = database.get_payment_coefficient("card")
        rub_amount_with_fee = int(rub_amount_with_fee * cf)

        minutes_left = max(int(time_left.total_seconds() // 60), 0)

        response_message = (
            f"üí∞ –í—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—É–º–º—É {rub_amount} —Ä—É–±.\n"
            f"–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å {minutes_left} –º–∏–Ω—É—Ç.\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {data['order_number']}.\n"
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
            "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É\n"
            f"{data['card_number']}\n"
            f"—Ç–æ—á–Ω—É—é —Å—É–º–º—É –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π {rub_amount_with_fee} —Ä—É–±.\n\n"
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            "‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\n"
            "–ñ–º–∏ üëâ /order_check\n\n"
            "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n"
            "–ñ–º–∏ üëâ /order_cancel"
        )

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(types.KeyboardButton("‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"), types.KeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"))
        keyboard.add(types.KeyboardButton('üè† –ú–µ–Ω—é'))
        keyboard.add(types.KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), types.KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
        keyboard.add(types.KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
        keyboard.add(types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), types.KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

        await message.answer(response_message, reply_markup=keyboard, parse_mode="HTML")

    async def start_order_timer(message: types.Message, state: FSMContext, order_number: str, delay: int = 15 * 60,
                                reminders: int = 4):
        for i in range(reminders):
            await asyncio.sleep(delay)
            data = await state.get_data()

            start_time = data['start_time']
            time_passed = datetime.now() - start_time
            time_left = timedelta(minutes=59) - time_passed

            if time_left.total_seconds() <= 0:
                break

            response_message = (
                f"<b>‚ùóÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–µ–º,</b>\n"
                f"—á—Ç–æ –∑–∞ –í–∞–º–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω\n"
                f"<b>{data['product_name']}</b> –Ω–∞ —Å—É–º–º—É {data['price_rub']} —Ä—É–±\n"
                f"–≤ —Ä–∞–π–æ–Ω–µ <b>{data['third_district']}</b>.\n"
                f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}.\n"
                f"–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å {int(time_left.total_seconds() // 60)} –º–∏–Ω—É—Ç.\n\n"
                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å <b>{data['price_rub']} —Ä—É–±</b>.\n"
                f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å {data['crypto_type']}:\n"
                f"<b>{data['crypto_address']}</b>\n"
                f"—Å—É–º–º—É <b>{data['price_crypto']} {data['crypto_type']}</b>"
            )

            if time_left.total_seconds() > 0:
                await message.answer(response_message, parse_mode=types.ParseMode.HTML)

        new_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        new_keyboard.add(KeyboardButton('üè† –ú–µ–Ω—é'))
        new_keyboard.row(KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
        new_keyboard.row(KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
        new_keyboard.row(KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

        await message.answer(
            f"<b>‚ùóÔ∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞</b>\n"
            f"–ó–∞–∫–∞–∑ {order_number} –æ—Ç–º–µ–Ω–µ–Ω!\n\n"
            f"‚ìÇÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n"
            f"–ñ–º–∏ üëâ /menu",
            reply_markup=new_keyboard,
            parse_mode=types.ParseMode.HTML
        )
        await state.finish()

    async def start_order_timer2(message: types.Message, state: FSMContext, order_number: str, payment_method: str,
                                 delay: int = 10 * 60, reminders: int = 4):
        for i in range(reminders):
            await asyncio.sleep(delay)
            data = await state.get_data()

            start_time = data['start_time']
            time_passed = datetime.now() - start_time
            time_left = timedelta(minutes=40) - time_passed

            if time_left.total_seconds() <= 0:
                break

            if payment_method == "hand_payment":
                response_message = (
                    f"<b>‚ùóÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–µ–º,</b>\n"
                    f"—á—Ç–æ –∑–∞ –í–∞–º–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω\n"
                    f"<b>{data['product_name']}</b> –Ω–∞ —Å—É–º–º—É {data['price_rub']} —Ä—É–±\n"
                    f"–≤ —Ä–∞–π–æ–Ω–µ <b>{data['third_district']}</b>.\n"
                    f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <b>{order_number}</b>.\n"
                    f"–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å {max(int(time_left.total_seconds() // 60), 0)} –º–∏–Ω—É—Ç.\n\n"
                                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                                    f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É +888 0439 2371 (–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã!)\n"
                                    f"—Ç–µ–∫—Å—Ç –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
                                    f"<b>–ü–ï–†–ï–î –ö–ê–ñ–î–û–ô –û–ü–õ–ê–¢–û–ô</b> —É—Ç–æ—á–Ω—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ø–æ—Ç–µ—Ä–∏ –≤–∞—à–∏—Ö –¥–µ–Ω–µ–≥!\n\n"
                                    f"<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –°–æ–æ–±—â–∞—Ç—å –æ–± –æ–ø–ª–∞—Ç–µ –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –∞ –Ω–µ –±–æ—Ç—É! –û–¥–Ω–∞–∫–æ –∞–¥—Ä–µ—Å –≤—ã–¥–∞—Å—Ç –í–∞–º –±–æ—Ç.\n"
                                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\n"
                f"–ñ–º–∏ üëâ /order_check\n\n"
                f"üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n"
                f"–ñ–º–∏ üëâ /order_cancel")


            elif payment_method == "card":
                card_details = data['payment_details']
                response_message = (
                    f"<b>‚ùóÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–µ–º,</b>\n"
                    f"—á—Ç–æ –∑–∞ –í–∞–º–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω\n"
                    f"<b>{data['product_name']}</b> –Ω–∞ —Å—É–º–º—É {data['price_rub']} —Ä—É–±\n"
                    f"–≤ —Ä–∞–π–æ–Ω–µ <b>{data['third_district']}</b>.\n"
                    f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}.\n"
                    f"–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–∑–µ—Ä–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å {max(int(time_left.total_seconds() // 60), 0)} –º–∏–Ω—É—Ç.\n\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                    f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É\n"
                    f"{card_details}\n"
                    f"—Ç–æ—á–Ω—É—é —Å—É–º–º—É –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π {data['price_rub']} —Ä—É–±.\n\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\n"
                    f"–ñ–º–∏ üëâ /order_check\n\n"
                    f"üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n"
                    f"–ñ–º–∏ üëâ /order_cancel"
                )

            if time_left.total_seconds() > 0:
                await message.answer(response_message, parse_mode=types.ParseMode.HTML)

        new_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        new_keyboard.add(KeyboardButton('üè† –ú–µ–Ω—é'))
        new_keyboard.row(KeyboardButton('üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'), KeyboardButton('üëâ –õ–æ–∫–∞—Ü–∏–∏'))
        new_keyboard.row(KeyboardButton('üí∞ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑'), KeyboardButton('‚ùì –ü–æ–º–æ—â—å'))
        new_keyboard.row(KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'), KeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))

        await message.answer(
            f"<b>‚ùóÔ∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞</b>\n"
            f"–ó–∞–∫–∞–∑ {order_number} –æ—Ç–º–µ–Ω–µ–Ω!\n\n"
            f"‚ìÇÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n"
            f"–ñ–º–∏ üëâ /menu",
            reply_markup=new_keyboard,
            parse_mode=types.ParseMode.HTML
        )
        await state.finish()


def convert(value):
    if value is None:
        return None
    try:
        float_value = float(value)
        if float_value == int(float_value):
            return int(float_value)
        else:
            return float_value
    except ValueError:
        return value

